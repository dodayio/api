import { typeDefs } from "./graphql-schema";
import { ApolloServer } from "apollo-server";
import { v1 as neo4j } from "neo4j-driver";
import { makeAugmentedSchema } from "neo4j-graphql-js";
import { IsAuthenticatedDirective, HasRoleDirective } from "./directives";
import dotenv from "dotenv";
const fetch = require('node-fetch');
const { getMetadata } = require('page-metadata-parser');
const domino = require('domino');

async function parseURL(url) {
  const response = await fetch(url);
  const html = await response.text();
  const doc = domino.createWindow(html).document;
  return await getMetadata(doc, url);
}

const metadata = parseURL('https://www.youtube.com/watch?v=9ptNxUH-lfY&list=PLNG6BIg2XJxBPMDNpPW8RBLRhJ9ZUIEtM');

console.log(metadata.then((value) => console.log(value)));

const express = require('express');

const app = express();
const port = 8080;

app.get('/', (req, res) => {

});

app.listen(port, () => console.log(`Example app listening on port ${port}!`));

// set environment variables from ../.env
dotenv.config();

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const schema = makeAugmentedSchema({
  typeDefs,
  schemaDirectives: {
    isAuthenticated: IsAuthenticatedDirective,
    hasRole: HasRoleDirective
  }
});

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || "bolt://localhost:7687",
  neo4j.auth.basic(
    process.env.NEO4J_USER || "neo4j",
    process.env.NEO4J_PASSWORD || "neo4j"
  )
);

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  context: ({ req }) => {
    return {
      headers: req.headers,
      driver
    }
  },
  schema
});

server.listen(process.env.GRAPHQL_LISTEN_PORT, "0.0.0.0").then(({ url }) => {
  console.log(`GraphQL API ready at ${url}`);
});
